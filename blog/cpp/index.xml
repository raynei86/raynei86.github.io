<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on youye</title>
    <link>https://raynei.dev/blog/cpp/</link>
    <description>Recent content in cpp on youye</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2022, Lihui Zhang</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 17:33:17 -0500</lastBuildDate><atom:link href="https://raynei.dev/blog/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A custom std::vector</title>
      <link>https://raynei.dev/a-custom-stdvector/</link>
      <pubDate>Sun, 13 Nov 2022 17:33:17 -0500</pubDate>
      
      <guid>https://raynei.dev/a-custom-stdvector/</guid>
      <description>Introduction This tutorial expects some basic C++ competency and familiarity with templates.
A vector is a dynamically sized contigous container, and probably the easiest STL container to implement following std::array.
Our implementation won&amp;rsquo;t contain all the member functions that std::vector has, since most of them are trivial to implement after the relevant ones.
Class layout There is only three members in the class:
 A variable to track capacity, or the max size A variable to track how many elements are in the vector The buffer to hold the elements  template &amp;lt;typename T&amp;gt; class vec { std::size_t cap; std::size_t size; T* arr; }; </description>
    </item>
    
  </channel>
</rss>
